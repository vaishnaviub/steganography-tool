// Theme toggle functions
function toggleTheme() {
    const currentTheme = document.documentElement.getAttribute('data-theme');
    const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
    document.documentElement.setAttribute('data-theme', newTheme);
    localStorage.setItem('theme', newTheme);
    updateThemeIcon(newTheme);
}

function updateThemeIcon(theme) {
    const moonIcon = document.querySelector('.fa-moon');
    const sunIcon = document.querySelector('.fa-sun');
    
    if (theme === 'dark') {
        if (moonIcon) moonIcon.style.display = 'none';
        if (sunIcon) sunIcon.style.display = 'inline-block';
    } else {
        if (moonIcon) moonIcon.style.display = 'inline-block';
        if (sunIcon) sunIcon.style.display = 'none';
    }
}

// Password strength checker
function checkPasswordStrength(password) {
    const strengthMeter = document.getElementById('passwordStrengthMeter');
    const strengthText = document.getElementById('passwordStrengthText');
    
    if (!strengthMeter || !strengthText) return;
    
    if (!password || password.length === 0) {
        strengthMeter.className = 'password-strength-meter';
        strengthMeter.style.width = '0%';
        strengthText.textContent = '';
        return;
    }

    // Calculate password strength
    let strength = 0;
    
    // Length check
    if (password.length < 6) {
        strength = 1;
    } else if (password.length < 8) {
        strength = 2;
    } else if (password.length < 10) {
        strength = 3;
    } else {
        strength = 4;
    }
    
    // Complexity checks (add points for complexity)
    if (password.match(/[a-z]+/)) strength += 1; // Lowercase letters
    if (password.match(/[A-Z]+/)) strength += 1; // Uppercase letters
    if (password.match(/[0-9]+/)) strength += 1; // Numbers
    if (password.match(/[!@#$%^&*(),.?\":{}|<>]+/)) strength += 2; // Special chars
    
    // Cap strength at 4 (0-3: weak, 4-5: fair, 6-7: good, 8+: strong)
    let strengthClass, width, feedback;
    if (strength <= 3) {
        strengthClass = 'password-strength-weak';
        feedback = 'Weak';
        width = '25%';
    } else if (strength <= 5) {
        strengthClass = 'password-strength-fair';
        feedback = 'Fair';
        width = '50%';
    } else if (strength <= 7) {
        strengthClass = 'password-strength-good';
        feedback = 'Good';
        width = '75%';
    } else {
        strengthClass = 'password-strength-strong';
        feedback = 'Strong';
        width = '100%';
    }
    
    // Update the UI
    strengthMeter.className = 'password-strength-meter ' + strengthClass;
    strengthMeter.style.width = width;
    strengthText.textContent = `Password Strength: ${feedback}`;
}

// Constants
const MAX_FILE_SIZE = 5 * 1024 * 1024; // 5MB
const ALLOWED_TYPES = ['image/jpeg', 'image/png', 'image/bmp'];

// Initialize when DOM is loaded
document.addEventListener('DOMContentLoaded', function() {
    // Initialize theme from localStorage or prefer-color-scheme
    const savedTheme = localStorage.getItem('theme') || 
                      (window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light');
    document.documentElement.setAttribute('data-theme', savedTheme);
    updateThemeIcon(savedTheme);

    // Theme toggle
    const themeToggle = document.getElementById('themeToggle');
    if (themeToggle) {
        themeToggle.addEventListener('click', toggleTheme);
    }

    // DOM Elements
    const encodeTab = document.querySelector('[data-tab="encode"]');
    const decodeTab = document.querySelector('[data-tab="decode"]');
    const encodePane = document.getElementById('encode');
    const decodePane = document.getElementById('decode');
    const encodeDropZone = document.getElementById('encodeDropZone');
    const decodeDropZone = document.getElementById('decodeDropZone');
    const encodeInput = document.getElementById('encodeImage');
    const decodeInput = document.getElementById('decodeImage');
    const messageInput = document.getElementById('message');
    const encodeBtn = document.getElementById('encodeBtn');
    const decodeBtn = document.getElementById('decodeBtn');
    const downloadBtn = document.getElementById('downloadBtn');
    let currentFile = null;

    // Tab switching
    [encodeTab, decodeTab].forEach(tab => {
        if (tab) {
            tab.addEventListener('click', () => {
                // Update active tab
                const activeTab = document.querySelector('.tab-btn.active');
                if (activeTab) activeTab.classList.remove('active');
                tab.classList.add('active');
                
                // Show corresponding pane
                if (tab === encodeTab) {
                    if (encodePane) encodePane.classList.add('active');
                    if (decodePane) decodePane.classList.remove('active');
                } else {
                    if (encodePane) encodePane.classList.remove('active');
                    if (decodePane) decodePane.classList.add('active');
                }
            });
        }
    });

    // File validation function
    function validateFile(file) {
        if (!file) return false;
        
        if (!ALLOWED_TYPES.includes(file.type)) {
            showToast(`Unsupported file type: ${file.type}`, 'error');
            return false;
        }
        
        if (file.size > MAX_FILE_SIZE) {
            showToast('File is too large. Max size is 5MB.', 'error');
            return false;
        }
        
        return true;
    }

    // Drag and drop functionality
    function setupDropZone(dropZone, input, type) {
        if (!dropZone || !input) return;

        ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
            dropZone.addEventListener(eventName, preventDefaults, false);
        });

        ['dragenter', 'dragover'].forEach(eventName => {
            dropZone.addEventListener(eventName, highlight, false);
        });

        ['dragleave', 'drop'].forEach(eventName => {
            dropZone.addEventListener(eventName, unhighlight, false);
        });

        dropZone.addEventListener('drop', handleDrop, false);
        dropZone.addEventListener('click', () => input.click());

        input.addEventListener('change', function(e) {
            if (this.files && this.files.length) {
                handleFiles(this.files, type);
            }
        });
    }

    function preventDefaults(e) {
        e.preventDefault();
        e.stopPropagation();
    }

    function highlight(e) {
        if (e.currentTarget) {
            e.currentTarget.classList.add('highlight');
        }
    }

    function unhighlight(e) {
        if (e.currentTarget) {
            e.currentTarget.classList.remove('highlight');
        }
    }

    function handleDrop(e) {
        const dt = e.dataTransfer;
        const files = dt.files;
        const dropZone = e.currentTarget;
        const type = dropZone.id.includes('encode') ? 'encode' : 'decode';
        
        if (files.length > 0) {
            handleFiles(files, type);
        }
    }

    function handleFiles(files, type) {
        const dropZone = document.getElementById(`${type}DropZone`);
        const fileList = document.getElementById(`${type}FileList`);
        
        // Clear previous files and preview
        if (fileList) {
            fileList.innerHTML = '';
        }
        
        // Process the first file for preview
        if (files.length > 0) {
            const file = files[0];
            if (!validateFile(file)) {
                showToast(`Invalid file: ${file.name}. Only images up to 5MB are allowed.`, 'error');
                return;
            }
            
            currentFile = file;
            
            // Create and show image preview
            const reader = new FileReader();
            reader.onload = function(e) {
                // Clear existing content
                while (dropZone.firstChild) {
                    dropZone.removeChild(dropZone.firstChild);
                }
                
                // Create preview container
                const preview = document.createElement('div');
                preview.className = 'image-preview';
                
                // Create image element
                const img = document.createElement('img');
                img.src = e.target.result;
                img.alt = 'Preview';
                
                // Create file info div
                const fileInfo = document.createElement('div');
                fileInfo.className = 'file-info';
                fileInfo.innerHTML = `
                    <span>${file.name}</span>
                    <span class="file-size">${formatFileSize(file.size)}</span>
                `;
                
                // Build the preview
                preview.appendChild(img);
                preview.appendChild(fileInfo);
                dropZone.appendChild(preview);
                dropZone.classList.add('has-preview');
            };
            reader.readAsDataURL(file);
        }
        
        if (type === 'encode') {
            // Show password field
            const passwordGroup = document.getElementById('passwordGroup');
            if (passwordGroup) {
                passwordGroup.style.display = 'block';
                const passwordInput = document.getElementById('password');
                if (passwordInput) passwordInput.value = '';
            }
            
            // Show encode button
            if (encodeBtn) encodeBtn.style.display = 'inline-flex';
            if (downloadBtn) downloadBtn.style.display = 'none';
            
            // Show success message
            showToast(`'${currentFile.name}' loaded. Ready to encode.`, 'success');
        } else {
            // For decode, show the decode button
            if (decodeBtn) decodeBtn.style.display = 'inline-flex';
        }
    }

    // Setup drop zones and file inputs
    if (encodeDropZone && encodeInput) {
        setupDropZone(encodeDropZone, encodeInput, 'encode');
        
        // Add direct file input change handler
        encodeInput.addEventListener('change', function(e) {
            if (this.files && this.files[0]) {
                handleFiles(this.files, 'encode');
            }
        });
    }
    if (decodeDropZone && decodeInput) {
        setupDropZone(decodeDropZone, decodeInput, 'decode');
        
        // Add direct file input change handler for decode
        decodeInput.addEventListener('change', function(e) {
            if (this.files && this.files[0]) {
                handleFiles(this.files, 'decode');
            }
        });
    }
    
    // Initialize password toggle
    setupPasswordToggle();

    // Encode Button Click Handler
    if (encodeBtn) {
        encodeBtn.addEventListener('click', async function() {
            if (!messageInput || !currentFile) {
                showToast('Please fill in all required fields', 'error');
                return;
            }

            const message = messageInput.value.trim();
            const password = document.getElementById('password')?.value || '';
            
            if (!message) {
                showToast('Please enter a message to encode', 'error');
                return;
            }

            encodeBtn.disabled = true;
            encodeBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Encoding...';

            try {
                const formData = new FormData();
                formData.append('image', currentFile);
                formData.append('message', message);
                
                if (password) {
                    formData.append('password', password);
                }

                const response = await fetch('/encode', {
                    method: 'POST',
                    body: formData
                });

                if (!response.ok) {
                    throw new Error('Encoding failed');
                }

                // Get the image as a blob
                const blob = await response.blob();
                
                // Create a URL for the blob
                const imageUrl = URL.createObjectURL(blob);
                
                // Show download button
                if (downloadBtn) {
                    downloadBtn.href = imageUrl;
                    downloadBtn.download = `encoded_${currentFile.name || 'image.png'}`;
                    downloadBtn.style.display = 'inline-flex';
                    
                    // Auto-click the download button if you want to force download
                    // downloadBtn.click();
                }
                
                showToast('Message encoded successfully!', 'success');
            } catch (error) {
                console.error('Encoding error:', error);
                showToast('Failed to encode message', 'error');
            } finally {
                if (encodeBtn) {
                    encodeBtn.disabled = false;
                    encodeBtn.innerHTML = 'Encode Message';
                }
            }
        });
    }

    // Decode Button Click Handler
    if (decodeBtn) {
        decodeBtn.addEventListener('click', async function() {
            if (!currentFile) {
                showToast('Please select an image to decode', 'error');
                return;
            }
            
            const password = document.getElementById('decodePassword')?.value || '';
            
            decodeBtn.disabled = true;
            decodeBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Decoding...';

            try {
                const formData = new FormData();
                formData.append('image', currentFile);
                
                if (password) {
                    formData.append('password', password);
                }

                const response = await fetch('/decode', {
                    method: 'POST',
                    body: formData
                });

                if (!response.ok) {
                    throw new Error('Decoding failed');
                }

                const result = await response.json();
                
                // Display the decoded message
                const messageElement = document.getElementById('decodedMessage');
                if (messageElement) {
                    messageElement.textContent = result.message || 'No message found';
                    messageElement.style.display = 'block';
                    
                    // Add copy button
                    addCopyButton(messageElement, result.message || '');
                }
                
                showToast('Message decoded successfully!', 'success');
            } catch (error) {
                console.error('Decoding error:', error);
                showToast('Failed to decode message. Make sure the image contains a hidden message and the password is correct.', 'error');
            } finally {
                if (decodeBtn) {
                    decodeBtn.disabled = false;
                    decodeBtn.innerHTML = 'Decode Message';

    function showToast(message, type = 'info') {
        const toast = document.getElementById('toast');
        if (!toast) return;
        
        toast.textContent = message;
        toast.className = `toast show ${type}`;
        
        // Hide after 3 seconds
        setTimeout(() => {
            toast.className = toast.className.replace('show', '');
        }, 3000);
    }

    function setupPasswordToggle() {
        const toggleButtons = document.querySelectorAll('.toggle-password');
        
        toggleButtons.forEach(button => {
            button.addEventListener('click', function() {
                const input = this.previousElementSibling;
                if (!input) return;
                
                const icon = this.querySelector('i');
                if (!icon) return;
                
                // Toggle input type
                const type = input.type === 'password' ? 'text' : 'password';
                input.type = type;
                
                // Toggle icon
                if (type === 'password') {
                    icon.classList.remove('fa-eye-slash');
                    icon.classList.add('fa-eye');
                } else {
                    icon.classList.remove('fa-eye');
                    icon.classList.add('fa-eye-slash');
                }
                
                // Focus the input after toggle
                input.focus();
            });
        });
    }

    function addCopyButton(messageElement, textToCopy) {
        if (!messageElement || !textToCopy) return;
        
        // Remove any existing copy button
        const existingBtn = document.getElementById('copyDecodedBtn');
        if (existingBtn) {
            existingBtn.remove();
        }
        
        // Create copy button
        const copyBtn = document.createElement('button');
        copyBtn.id = 'copyDecodedBtn';
        copyBtn.className = 'btn btn-sm btn-outline-secondary mt-2';
        copyBtn.innerHTML = '<i class="far fa-copy me-2"></i>Copy to Clipboard';
        copyBtn.style.width = '100%';
        
        // Add click handler
        copyBtn.addEventListener('click', async () => {
            try {
                await navigator.clipboard.writeText(textToCopy);
                showToast('Copied to clipboard!', 'success');
            } catch (err) {
                console.error('Failed to copy:', err);
                showToast('Failed to copy to clipboard', 'error');
            }
        });
        
        // Create container for the button
        const buttonContainer = document.createElement('div');
        buttonContainer.className = 'd-grid gap-2 mt-3';
        buttonContainer.appendChild(copyBtn);
        
        // Insert after the message
        messageElement.parentNode.insertBefore(buttonContainer, messageElement.nextSibling);
    }

    // Initialize forms
    function resetEncodeForm() {
        const form = document.getElementById('encodeForm');
        if (form) form.reset();
        const passwordGroup = document.getElementById('passwordGroup');
        if (passwordGroup) passwordGroup.style.display = 'none';
        if (encodeBtn) encodeBtn.style.display = 'none';
        if (downloadBtn) downloadBtn.style.display = 'none';
    }

    function resetDecodeForm() {
        const form = document.getElementById('decodeForm');
        if (form) form.reset();
        const messageElement = document.getElementById('decodedMessage');
        if (messageElement) {
            messageElement.textContent = '';
            messageElement.style.display = 'none';
        }
        if (decodeBtn) decodeBtn.style.display = 'none';
        
        // Remove any existing copy button
        const existingBtn = document.getElementById('copyDecodedBtn');
        if (existingBtn) {
            existingBtn.remove();
        }
    }

    // Initialize forms
    resetEncodeForm();
    resetDecodeForm();

    // Social Share Functionality
    const shareUrl = window.location.href;
    const shareTitle = 'Check out this Steganography Tool';
    const shareText = 'Securely hide messages in images with this easy-to-use steganography tool.';

    // Social share handlers
    document.querySelectorAll('.social-btn').forEach(button => {
        button.addEventListener('click', function(e) {
            e.preventDefault();
            const platform = this.getAttribute('data-share');
            let shareUrl = '';
            
            switch(platform) {
                case 'twitter':
                    shareUrl = `https://twitter.com/intent/tweet?url=${encodeURIComponent(shareUrl)}&text=${encodeURIComponent(shareText)}`;
                    window.open(shareUrl, '_blank', 'width=600,height=400');
                    break;
                    
                case 'instagram':
                    // Instagram doesn't support direct sharing, so we'll open the app or website
                    shareUrl = `https://www.instagram.com/`;
                    window.open(shareUrl, '_blank');
                    showToast('Open Instagram to share this tool!', 'info');
                    break;
                    
                case 'linkedin':
                    shareUrl = `https://www.linkedin.com/sharing/share-offsite/?url=${encodeURIComponent(shareUrl)}`;
                    window.open(shareUrl, '_blank', 'width=600,height=500');
                    break;
                    
                case 'whatsapp':
                    shareUrl = `https://wa.me/?text=${encodeURIComponent(shareText + ' ' + shareUrl)}`;
                    window.open(shareUrl, '_blank');
                    break;
                    
                case 'copy':
                    navigator.clipboard.writeText(shareUrl).then(() => {
                        showToast('Link copied to clipboard!', 'success');
                    }).catch(err => {
                        console.error('Failed to copy: ', err);
                        showToast('Failed to copy link', 'error');
                    });
                    break;
            }
        });
    });
});
